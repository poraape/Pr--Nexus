from pathlib import Path\nparts: list[str] = []\n
parts.append("""import React, { useEffect, useMemo, useState } from \"react\";\nimport type { AuditReport, ChartData } from \"../types\";\nimport { parseSafeFloat } from \"../utils/parsingUtils\";\nimport Chart from \"./Chart\";\nimport SmartSearch from \"./SmartSearch\";\nimport AnalysisDisplay from \"./AnalysisDisplay\";\nimport CrossValidationPanel from \"./CrossValidationPanel\";\n\nconst hasValue = (value: unknown): boolean => value !== null && value !== undefined && value !== \"\";\n\ntype MetricImportance = \"core\" | \"alert\" | \"optional\";\ntype MetricFormat = \"currency\" | \"integer\" | \"float\";\ntype MetricCalculation = \"countDocs\" | \"countItems\" | \"sumDocs\" | \"sumItems\";\ntype MetricStatus = \"ok\" | \"zero\" | \"missing\";\n\ninterface MetricDefinition {\n    id: string;\n    label: string;\n    description: string;\n    importance: MetricImportance;\n    format: MetricFormat;\n    calculation: MetricCalculation;\n    fields?: string[];\n    zeroMessage?: string;\n    missingMessage?: string;\n}\n\ninterface MetricResult {\n    def: MetricDefinition;\n    status: MetricStatus;\n    rawValue: number | null;\n    formattedValue: string;\n    fieldUsed?: string;\n    nonNullCount: number;\n    zeroCount: number;\n    tooltip: string;\n}\n\ninterface AnalyticalItem extends Record<string, any> {\n    __docKey: string;\n    __docName: string;\n    __period: string;\n    __emissionDateLabel: string;\n    __emitente: string;\n    __destinatario: string;\n    __origemUf: string;\n    __destinoUf: string;\n    __operacao: string;\n}\n\ninterface AnalyticalContext {\n    items: AnalyticalItem[];\n    docTotals: Map<string, number | null>;\n}\n\nconst METRIC_DEFINITIONS: MetricDefinition[] = [\n""")
parts.append("""    {\n        id: \"doc_count\",\n        label: \"Número de Documentos Válidos\",\n        description: \"Quantidade de documentos com itens válidos conforme o filtro selecionado.\",\n        importance: \"core\",\n        format: \"integer\",\n        calculation: \"countDocs\",\n    },\n    {\n        id: \"item_count\",\n        label: \"Total de Itens Processados\",\n        description: \"Quantidade de itens individualizados após o processamento.\",\n        importance: \"core\",\n        format: \"integer\",\n        calculation: \"countItems\",\n    },\n    {\n        id: \"nfe_total\",\n        label: \"Valor Total das NF-e\",\n        description: \"Somatória dos valores totais por nota fiscal (considerando cada NF apenas uma vez).\",\n        importance: \"core\",\n        format: \"currency\",\n        calculation: \"sumDocs\",\n        fields: [\"valor_total_nfe\", \"valor_da_nfe\", \"total_nf\"],\n        zeroMessage: \"Nenhuma NF-e possui valor informado para o filtro atual.\",\n        missingMessage: \"Campo com o valor total das notas não encontrado no dataset atual.\",\n    },\n    {\n        id: \"products_total\",\n        label: \"Valor Total dos Produtos\",\n        description: \"Somatória do campo de valor total por item.\",\n        importance: \"core\",\n        format: \"currency\",\n        calculation: \"sumItems\",\n        fields: [\"produto_valor_total\", \"valor_total\", \"valor_produto\", \"vl_total_item\"],\n        zeroMessage: \"Os itens analisados apresentam valor total igual a zero.\",\n        missingMessage: \"Não foi encontrado campo de valor total de item (ex.: \\\"produto_valor_total\\\").\",\n    },\n    {\n        id: \"icms_total\",\n        label: \"Valor Total de ICMS\",\n        description: \"Somatória do ICMS informado nos itens. Quando ausente, pode indicar falta de preenchimento.\",\n        importance: \"alert\",\n        format: \"currency\",\n        calculation: \"sumItems\",\n        fields: [\"produto_valor_icms\", \"valor_icms\", \"vl_icms\"],\n        zeroMessage: \"ICMS informado como zero para todos os itens filtrados.\",\n        missingMessage: \"Campo de ICMS não encontrado; revise sua planilha ou integração.\",\n    },\n    {\n        id: \"pis_total\",\n        label: \"Valor Total de PIS\",\n        description: \"Somatória do PIS informado nos itens.\",\n        importance: \"alert\",\n        format: \"currency\",\n        calculation: \"sumItems\",\n        fields: [\"produto_valor_pis\", \"valor_pis\", \"vl_pis\"],\n        zeroMessage: \"PIS informado como zero para todos os itens filtrados.\",\n        missingMessage: \"Campo de PIS não encontrado nos dados extraídos.\",\n    },\n    {\n        id: \"cofins_total\",\n        label: \"Valor Total de COFINS\",\n        description: \"Somatória do COFINS informado nos itens.\",\n        importance: \"alert\",\n        format: \"currency\",\n        calculation: \"sumItems\",\n        fields: [\"produto_valor_cofins\", \"valor_cofins\", \"vl_cofins\"],\n        zeroMessage: \"COFINS informado como zero para todos os itens filtrados.\",\n        missingMessage: \"Campo de COFINS não encontrado nos dados extraídos.\",\n    },\n    {\n        id: \"iss_total\",\n        label: \"Valor Total de ISS\",\n        description: \"Somatória do ISS informado nos itens de serviço (quando aplicável).\",\n        importance: \"alert\",\n        format: \"currency\",\n        calculation: \"sumItems\",\n        fields: [\"produto_valor_iss\", \"valor_iss\", \"vl_iss\"],\n        zeroMessage: \"ISS informado como zero para todos os itens filtrados.\",\n        missingMessage: \"Campo de ISS não encontrado nos dados extraídos.\",\n    },\n];\n\nconst CANDIDATE_DOC_KEYS = [\n    \"nfe_id\",\n    \"chave_acesso\",\n    \"chave_da_nfe\",\n    \"numero_nfe\",\n    \"numero\",\n    \"id_documento\",\n];\n\nconst parseDateValue = (value: unknown): Date | null => {\n    if (!value) return null;\n    if (value instanceof Date && !Number.isNaN(value.getTime())) return value;\n    const text = String(value).trim();\n    if (!text) return null;\n    const parsed = Date.parse(text);\n    if (!Number.isNaN(parsed)) return new Date(parsed);\n    const match = text.match(/^(\\d{2})[\\/\\-](\\d{2})[\\/\\-](\\d{4})/);\n    if (match) {\n        const [, dd, mm, yyyy] = match;\n        return new Date(Number(yyyy), Number(mm) - 1, Number(dd));\n    }\n    return null;\n};\n\nconst findNumericValue = (source: Record<string, any>, candidates: string[] = []): number | null => {\n    for (const field of candidates) {\n        if (!hasValue(source[field])) continue;\n        const parsed = parseSafeFloat(source[field]);\n        if (!Number.isNaN(parsed)) {\n            return parsed;\n        }\n    }\n    return null;\n};\n""")
parts.append("""const extractDocKey = (item: Record<string, any>, fallback: string): string => {\n    for (const field of CANDIDATE_DOC_KEYS) {\n        if (hasValue(item[field])) {\n            return String(item[field]);\n        }\n    }\n    return fallback;\n};\n\nconst formatCurrency = (value: number | null): string =>\n    value === null ? \"—\" : value.toLocaleString(\"pt-BR\", { style: \"currency\", currency: \"BRL\" });\n\nconst formatInteger = (value: number | null): string =>\n    value === null ? \"—\" : Math.round(value).toLocaleString(\"pt-BR\");\n\nconst formatFloat = (value: number | null): string =>\n    value === null ? \"—\" : value.toLocaleString(\"pt-BR\", { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n\nconst buildAnalyticalContext = (report: AuditReport): AnalyticalContext => {\n    const items: AnalyticalItem[] = [];\n    const docTotals = new Map<string, number | null>();\n\n    report.documents\n        .filter(doc => doc.status !== \"ERRO\" && doc.doc.data && doc.doc.data.length > 0)\n        .forEach(auditedDoc => {\n            const rows = auditedDoc.doc.data ?? [];\n            rows.forEach((rawItem, index) => {\n                const item = { ...rawItem } as Record<string, any>;\n                const fallbackKey = `${auditedDoc.doc.name ?? 'documento'}#${index}`;\n                const docKey = extractDocKey(item, fallbackKey);\n                const emissionDate = parseDateValue(item.data_emissao ?? item.emissao);\n\n                const normalized: AnalyticalItem = {\n                    ...item,\n                    __docKey: docKey,\n                    __docName: auditedDoc.doc.name ?? docKey,\n                    __period: emissionDate\n                        ? `${emissionDate.getFullYear()}-${String(emissionDate.getMonth() + 1).padStart(2, '0')}`\n                        : 'Sem data',\n                    __emissionDateLabel: emissionDate\n                        ? emissionDate.toLocaleDateString('pt-BR')\n                        : 'Sem data',\n                    __emitente: item.emitente_nome ?? 'Não informado',\n                    __destinatario: item.destinatario_nome ?? 'Não informado',\n                    __origemUf: (item.emitente_uf ?? 'Não informado').toString().toUpperCase(),\n                    __destinoUf: (item.destinatario_uf ?? 'Não informado').toString().toUpperCase(),\n                    __operacao: item.natureza_da_operacao ?? item.natureza ?? 'Não informado',\n                };\n\n                items.push(normalized);\n\n                if (!docTotals.has(docKey)) {\n                    docTotals.set(docKey, findNumericValue(item, ['valor_total_nfe', 'valor_da_nfe', 'total_nf']));\n                }\n            });\n        });\n\n    return { items, docTotals };\n};\n\nconst statusBadgeConfig: Record<MetricStatus, { container: string; badgeClass: string; badgeLabel: string; valueClass: string }> = {\n    ok: {\n        container: 'bg-gray-700 border border-gray-700/60',\n        badgeClass: 'bg-emerald-600/20 text-emerald-300',\n        badgeLabel: 'Completo',\n        valueClass: 'text-teal-300',\n    },\n    zero: {\n        container: 'bg-gray-700/40 border border-amber-500/60',\n        badgeClass: 'bg-amber-500/20 text-amber-200',\n        badgeLabel: 'Valor zero',\n        valueClass: 'text-amber-300',\n    },\n    missing: {\n        container: 'bg-gray-700/20 border border-rose-500/70',\n        badgeClass: 'bg-rose-500/20 text-rose-200',\n        badgeLabel: 'Campo ausente',\n        valueClass: 'text-rose-300',\n    },\n};\n\nconst formatMetricValue = (value: number | null, format: MetricFormat): string => {\n    switch (format) {\n        case 'currency':\n            return formatCurrency(value);\n        case 'integer':\n            return formatInteger(value);\n        case 'float':\n        default:\n            return formatFloat(value);\n    }\n};\n""")
parts.append("""const MetricCard: React.FC<{ metric: MetricResult }> = ({ metric }) => {\n    const styling = statusBadgeConfig[metric.status];\n    return (\n        <div\n            className={`rounded-lg p-4 shadow-sm transition-colors ${styling.container}`}\n            title={metric.tooltip}\n            aria-live="polite"\n        >\n            <div className=\"flex items-center justify-between gap-3\">\n                <span className=\"text-xs uppercase tracking-wide text-gray-400\">{metric.def.label}</span>\n                <span className={`px-2 py-1 rounded-full text-xs font-semibold ${styling.badgeClass}`}>\n                    {styling.badgeLabel}\n                </span>\n            </div>\n            <p className={`mt-2 text-2xl font-bold ${styling.valueClass}`}>{metric.formattedValue}</p>\n            <p className=\"mt-2 text-xs text-gray-400 leading-relaxed\">{metric.tooltip}</p>\n        </div>\n    );\n};\n\nconst FilterSelect: React.FC<{ label: string; options: { value: string; label: string }[]; value: string; onChange: (value: string) => void; }> = ({ label, options, value, onChange }) => (\n    <label className=\"text-xs text-gray-400 uppercase tracking-wide space-y-1\">\n        <span>{label}</span>\n        <select\n            className=\"w-full bg-gray-900/60 border border-gray-700 rounded-md px-3 py-2 text-sm text-gray-200 focus:border-blue-500 focus:outline-none transition\"\n            value={value}\n            onChange={event => onChange(event.target.value)}\n        >\n            {options.map(option => (\n                <option key={option.value} value={option.value}>\n                    {option.label}\n                </option>\n            ))}\n        </select>\n    </label>\n);\n""")
